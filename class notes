Notes:

Box - Sizing:

Content-box
button 122

border-box
button 100

button {
width:100px;
padding:10px;
border: 1px solid black
}

* {
box-sizing: border-box;
}

Position: fixed --> width is determined by content
or
absolute --> unlocks top, right, bottom, left, z-index

overlay:
section {
position:fixed;
top:0;
bottom:0;
right:0;
left:0;
}

Tables:
<table>
Each row - <tr>
Each column - <td>
</table>

cells go within rows, everything goes within a <table> tag
Optional:
  <thead> - header row
  <th> - like TD but for a header

<td colspan="2">  if you want to merge cells

CSS Classes:
Re-use CSS rules without the need for an element
Rule--> named
Custom adjective

Use a dot "." to select

Relative : on its own to fine tune position
position-fixed: you dont care who the parents are - it is just relative to the browser
the order in which we define the classes does not matter

classes are more specific than just a tag

CSS Library
HTML + CSS + JS
Buttons
Naviations
Headers
Reset (body {margin:0})
Grids
  Layout
  responsiveness
cross-browser

Less - preprocessor (SCSS)
.less -->
variables for things like colors
functions: lighten (red,10%), mix (red,blue, 50%), nesting, separate codes into different files (no download penalty)

Javascript:

x=y+1
x=2+3

Variables:
  -store a value
  - value may change
  - named value

Numbers, strings, arrays, names, address, css class, ANYTHING

VAR x = 1; (lines end w/semicolon - aka period at the end of the sentence, end of statement)
x = variable name
  ex. number - primitive = lowest level type of thing
  ex. string - primitive  --- string has quotes!
    VAR A = "xyz"
    VAR FNAME = "avand" ( like a periodic table element - you cant break them up further)
  ex. boolean - primitive -- true or false
    VAR LIGHTSON = TRUE;
    Cannot DO: VAR TRUE = 1; because "true" is a special taken keyword
      1, A, True = object literals
  VAR TODAY = "2015/11/11" -- string
  VAR TOMORROW (theoretical) = D 2015-11-11; 5:30pm

  = is called OPERATOR (+,-,*,/,%)
    means "set" or "save"
    + addition for numbers VAR X = 1+1
    VAR Y = "A"+"B" --> Y becomes "AB" -- called concatenation for strings

Reserved Words:
  True - object literal for false
  VAR- declare variables
  Function - declare function
  Alert
  Return


JS VAR NAME Rules
 - cant use a keyword
 - cant start with a number
 - no special characters * / + = @ " ' ($ is good)

 JS VAR Convention
 Camel case
 firstName - theFirstLady

 You only need to use VAR the first time you declare a variable
 JS is case sensitive
 JS runs - top to border-bottom
 Optional arguments (many) --> into function --> optional - the return (only one)

 Variables -- are like our nouns
 Functions -- are like our verbs
  all about doing stuff
  must be called to actually do the work
  3 Functions:
    Prompt - 1 argument Returns User Input OR null OR blank string
    Alert - 1 argument (string) Returns Undefined
    Parse Int

    Arguments - no need for var

11/16

Event Handling - responding to user action or sometimes just browser action
"when x Do why"

<p class="comment">set text context</p>

Dom (html tree (page)) Manipulations
 - creating element
 - setting text contect
 - changing attributes
 - changing css classes
 - appending children to parents (where in the dom)

Arrays + Loops
N-times do something
lists of data
Loops - N-#
  "as many columns as"

Conditionals:
"If this then do"

Homework:
Dom -- element -- value
element is a generic thing = input is a specific type of element

Functions: doing/verbs
- do one thing, which is what its called

Function = Arguments "meat" (can have multiple, one, or none)-> Body (JS code)--> return value "sausage" (only 1 or undefined)

Function Definition:
Function makeSausage(meat){
VAR sausage="casing"+meat+"casing";
Return sausage
}

Function (JS keywords) + Name of Function (arbitrary but should tell you what it does) (){};

ex. Function CalcFtoC (F){ Return (F-32)*5/9};

Curly braces are required - where the function begins and ends "walls of the factory" - where you do something to F - using the value that was passed in
parenthesis - declares a variable - argument - variable without the VAR
"return"- tells the function to stop

Do the work:
CaclF2C(52) -- 52 becomes F inside the body of the function

Dom (html tree (page)) Manipulations
1 - creating element
2 - get an element (parent,container)
3 - set text content
4 - change attributes
5 - change css classes
6 - append child to parent

ToDo/Index.html
(4 lines of JS code)
Empty state (initial)
Page loads
all HTML Rendered
HTML
  Head
  body
    input
    button
    ul (2 GET)(empty - container for new <li>s)(1-create+3 set text content+6)--><li>stuff</li>

Element
  textContent() - <p>foo</p> foo is the textContent - always a string
  appendChild() - adds one element to another (as a child)

Document (The whole page- the DOM)
  GET is querySelector() - find an element by CSS selector
  CREATE is createElement() - create a new element not on the page yet

String
  "hello".length -->5
  you can ask questions about a string

document.querySelector(string:el you want)
document.createElement(string "header""p""li")
querySelector & createElement are METHODS
document is an OBJECT - DOM/HTML

element SetTextContent
EL.textContent
  var b = document.querySelector("button")
  b.textContent="Go away"
  Response: button changed to "Go away"
  object - collection of properties and behavior - methods - functions
  textContent is just a property of the element

  ul.appendChild (childelement<li>)

  add a button:
  var b = document.createElement("button")
b.textContent = "hello there!"
  "hello there!"
var parent = document.querySelector ("header")
undefined
parent.appendChild(b)
  <button>​hello there!​</button>​

querySelector returns the first element that matches the css selector - something a document can do
"li" -- string and Quotes=object literal

Methods on Strings:
length
toLowerCase()
toUpperCase()
split()

var s = "avand";
var sl = s.toLowerCase();

Methods on Numbers:
toString()


var n = 1;
var s = n.toString();

1 querry selector for the body - then everything else is append child and text content
1. create el - "A" or "button"
2. set text Content "products" "sign up"
3. append child "1st li" "second li"


tagName, Text, parent --> makeElementWithTextContent

Functions are a way of genericizing functionality

function makeElement (tagName,text,parent){
  var NewElement = document.createElement("tagName")
  newElement.textContent = "text"
  var parentElement = document.querySelector ("parent")
  parentElement.appendChild(newElement)
}

call function (outside the function!!!):
makeElementWithTextContent("Li","finish homework","ul")
makeElement("A","products","Header Li:first-child")

11/30/15

Forms:
- accept user input
<input type = "search"
="text", email, password, checkbock,
radio
- focus state : when cursor is in the input
<label>
  name:
  <input type:"text";
</>
---- clicking "name" focuses the input

value : text inside the input NOT text content

With Javascript:
1. Get the El
    var input = document.querySelector ("#NAME")
      css selector
    var s = input.value;

    input.value="david"; -->changes the value to david


    <input type = "submit" value ="save">
    <button type="submit">Save</button>

    Select html:

    <select>
      <option> select one</option>
      <option> select two</option>
    </select>

Form Tags:
<form>
1. tells the browser where to send the data
2. Serves to capture the "subit" (click + enter)

Variables:
  -store a value
  - value may change
  - named value
you wouldnt have any functions - everything would be hardcoded
variables are nouns

Functions:
Function = Name, Arguments (optional), Body (JS code), return value (optional)
no variable outputs, you cant jump around - just runs top to bottom
verbs

DOM:
document object model - the whole page
document
Dom (html tree (page)) Manipulations
1 - creating element
2 - get an element (parent,container)
3 - set text content
4 - change attributes
5 - change css classes
6 - append child to parent

Event handlers
= 1 argument : the even the occured
= function thats called in response to an event
= do dont ever call it

- element : appendChild
- document: querySelector
- string: toUpperCase
- event : target (which element fired the event), shift, control, timestamp, preventDefault
        - always 1 argument, always called "event"
    - event object gets passed into the like function

How to listen to an event:
1. Get the element you want to listen to(querySelector)
2 add the event listener (addEventListener)
3. write the event handler (function)

blog hw:
1. get the current # of likes
    Get the <span>(container)
    Get the text content of the span
    convert string to a number
2. increment by 1
3. set the number

use a <label> to set up your focus of your list

Disolve:
Transition: all {
  .light{
  background-color:...;
  transition: background-color: 30dms;
  }
  .light-on{

  }
}

pseudo-elements:
Div::after{...}
Div::before(...)

-2 for every element (before and after)
- requires content
  content:"";

  - create list item doesnt create anything
  - cant append an undefined child to a parent

todo-list item : adjacent siblings
  <input...>
  <span>

  input + span {

  }
  input:checked{

  }
  //"the span right next to the checked input"
input:checked + span{
  color:grey;
  text-decoration: line-through'
}

Event:
- preventDefault- keeps the page from refreshing
- targeting - what element caused something to occur
    - element - textContent
    - string - length
    - array - length

event.target.getAttribute("id")
--returns the id

function playNote(event){
event.preventDefault();
howl.play(event.target.getAttribute("id"))
}

Arrays:
Object Literals:
  integer - var N= 1;
  boolean - var t=true;
  string - var s="bleh";
  array - var a=[];
  ex. var a1=[1,2,3];   //array of nums
      var a2=["a","b","c"];     //array of strings

- Lists of stuff
- ordered!
- items can be mixed types
- 0-based (start counting at 0)
- allow you to do the same thing to every item
  var keys=document.querySelectorAll(".key")
  var key1=keys[];
        //access a specific item in the array by index
        //"0th key"
- arrays should have plural names

querySelectorAll - returns multiple elements

var = ["A","B","C"]
        0   1   2

A[0]
A[1]
A[2]
      -- A[i] - for loop: dynamic index that increments up to the last item

For (initialize;condition;increment){
}

For (var i=0; i<A.length; i=i+1){
  Alert (A[i]);
}
// runs as long as the array length - 3x


var keys=document.querySelectorAll(".key")

for (var i=8, i<keys.lenth; i++){
  keys[i].addEventListener("click",playnote);
}

12/9
Arrays Review:
- collection of items
- preserve their order
- items are indexed by a number -> 0,1,2,3

Declaring an Array:
var a=[];    //declare an empty array
var a1=[1,2,3];   //array of nums
var a2=["a","b","c"];     //array of strings

var B=[123,"ABC",true,[]];
B.length //gives you the length -->4
index: 0,1,2,3

Get the first element out of array:
var first=B[0]

Objects: collection of properties and behavior (functions, methods)
Array Methods:
  - Length
  - pop()
  - push()

  var A=["A","B","C"]
  A[0]="A"
  A[1]="B"
  A[2]="C"

  alert(A[0]);
  alert(A[1]);
  alert(A[2]);

  0,1,2 == index : starts at 0, does the work, increments, check that index isn't out of bounds

  var i=0;
  if (i<a.length){
    alert(a[i]);
  }
i=i+1;

for (var i=0;i<A.lenth; i++){
  alert(A[i])
}                  //this will only run 3 times

  var keys=document.querySelectorAll(".key")

  for (var i=8, i<keys.lenth; i++){
    keys[i].addEventListener("click",playnote);
  }


CONDITIONALS:
- comparing 2 things
    - equality A==B
    - greater than A>B
    - less than A<B
    - greater than or equal to A>=B
    - less than or equal to A<=B
    - not equal A!=B
- result in a boolean
- when to use:
   - for loop: the break condition (i<a.length)
   - if statements

IF STATEMENTS
   IF (__Conditional_Statement__){

   }

   IF (A>B){

   } else {

   }

12/14

Object Oriented Programming:
Element:
  - setAttribute
  - appendChild
  - textContent
  - value

Document:
  - createElement
  - querySelector
String
  - split
  - length

Objects: collection of properties and functions

Object Inheritance:
string:
  - toUpperCase
  - length
object:
  - toString
case insensitive string: inherits all properties and behavior of the parent
  - compare

Create object with properties:

var car = {
  numWheels:4,
  color: "red"
};
alert(car.color);
car.color="green";

car.engine={
  size: "1500cc",
  cylinders: 4,
  horses: 200,
  hybrid:false
}

car.engine.hybrid=true;

or car["engine"]["hybrid"]=true
brackets instead when dealing with 3rd party data

GETTING THE TITLE OF THE FIRST MOVIE:

var results= {
}
results.Search[0].Title
For (var i=0; i< results["Search"].length,i++){
results["Search"][i];
}


$.get(url, resultsReceived)

resultsReceived -- the function

search for the locations and put them on a map
"forms over data" - "find me" button that puts it on a map

chat is basically the same as the to do list - you just save the data

What does Javascript help us to:
  1. Dom manupulation:
    - new content
    - changing content
  2. Request data from a data source (API)

movie:
  create movie list items:
  link
  li
  div
  span

  http://omdbapi.com/?s=matric
  - jquery: $.get("...", fn)
  submin the form
  get the value of the input

createMovie (name,url,year)
resultsReceived(results) - an object with a key called "search" - which has an array
for (var i=0; i<results["search"];i++){}
formSubmitted(event)

Var A= document.querySelector("A")
createElement -- document.createElement("li") -- $("<li>") need carrots to tell jquery to CREATE
QueryExisting -- document.querySelector("ul") -- $("ul")
Get text -- var T = li.textContent; -- var T=$li.text()
                                    -- $li.text("....") -- same FN Dif Arguments -- riff results (overloading)
set attr - A.setAttribute("href","....") ---- $A.attr("href","...")
get attr - var href = A.getAttribute("href"); ----- var href = $A.attr("href")
adding class -- li.classList.add("movie-item") --- $li.addClass("movie-item")
appending -- li.appendChild(A) -- $li.append($A) or $A.appendTo($li);

add event listener -- a.addEventListener("click", FN) -- $A.on("click".fn)

OAuth  - security/auth
API Access:
 - free/open
 - key/un/pw : would still be public
 - OAtuth (login popup - "do you allow __ to use __") - redirect to provider. Access token gives your app temp access to your customers data


 *** Map Box

 do a tutorial and get a basic map on a page

 properties of an animation:
 - name
 - easing function
 - duration
 - keyframes (states you care about)
 - Fill Mode
 - Direction

 keyframes:

 @keyframes move {
  from {
    }
  to {

  }
 }

Animation property:
.box{
animation-name: move;
animation-duration: 200ms;
}


close & map html
